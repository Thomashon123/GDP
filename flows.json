[
    {
        "id": "814a5ca7292ea26e",
        "type": "tab",
        "label": "Hydroguard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1fa8e5c7a0707704",
        "type": "serial in",
        "z": "814a5ca7292ea26e",
        "name": "",
        "serial": "b62b2fb7fd38bca7",
        "x": 230,
        "y": 80,
        "wires": [
            [
                "e6dac0735c4ab833",
                "cb3639b5760f845d",
                "5fc60580027aae95",
                "0c715c047c92b091",
                "eb5ed37d850121f3",
                "01f17db524adee51",
                "c4f8b6c21889f492"
            ]
        ]
    },
    {
        "id": "5fc60580027aae95",
        "type": "debug",
        "z": "814a5ca7292ea26e",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 80,
        "wires": []
    },
    {
        "id": "e6dac0735c4ab833",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "current return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, h2;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'Temperature') {\n        temp = value;\n    } else if (key === 'AMPS') {\n        amps = value;\n    } else if (key === 'WATTS') {\n        watts = value;\n    } else if (key === 'Time') {\n        time = value;\n    } else if (key === 'H2') {\n        h2 = value;\n    }\n}\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\n\n// Set the result object as the node's payload\nmsg.payload = h2;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "c4c975e3e864bbd1",
                "2d4cd070add6d221"
            ]
        ]
    },
    {
        "id": "cb3639b5760f845d",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "power return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, day;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'Temperature') {\n        temp = value;\n    } else if (key === 'AMPS') {\n        amps = value;\n    } else if (key === 'WATTS') {\n        watts = value;\n    } else if (key === 'Time') {\n        time = value;\n    } else if (key === 'Day') {\n        day = value;\n    }\n}\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\n\n// Set the result object as the node's payload\nmsg.payload = watts;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "da0b46e704ba1882"
            ]
        ]
    },
    {
        "id": "0c715c047c92b091",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "time return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, day;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'Temperature') {\n        temp = value;\n    } else if (key === 'AMPS') {\n        amps = value;\n    } else if (key === 'WATTS') {\n        watts = value;\n    } else if (key === 'Time') {\n        time = value;\n    } else if (key === 'Day') {\n        day = value;\n    }\n}\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\n\n// Set the result object as the node's payload\nmsg.payload = time;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "d51d1e9f5723cbbb"
            ]
        ]
    },
    {
        "id": "eb5ed37d850121f3",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "day return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, day;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'Temperature') {\n        temp = value;\n    } else if (key === 'AMPS') {\n        amps = value;\n    } else if (key === 'WATTS') {\n        watts = value;\n    } else if (key === 'Time') {\n        time = value;\n    } else if (key === 'RunTime') {\n        day = parseFloat((value / 60000).toFixed(2));\n    }\n}\n\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\n\n// Set the result object as the node's payload\nmsg.payload = day;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 480,
        "wires": [
            [
                "ccc95cb92c0dd8ef",
                "4e3596285db2177b"
            ]
        ]
    },
    {
        "id": "932545bab067e37e",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "Send email",
        "func": "var runtime = msg.payload;\nmsg.from=\"hchuhao007@gmail.com\";\n\nvar d = new Date();\nvar message =\"\";\nif (msg.alarm)\n{\n    msg.topic =\"Motor Runtime Alarm\";\n    message = \"Motor Runtime exceed 5 mins, Time to service! Current motor runtime (mins): \";\n}\nmsg.payload = \"time: \" + d + message + runtime;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "54cd99aba90f385a",
                "08cbac3b676e5684",
                "647ef8159208b925"
            ]
        ]
    },
    {
        "id": "4e3596285db2177b",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "Alarm Status",
        "func": "var payload = msg.payload;\nvar alarm_flag = context.get(\"alarm_flag\");\nvar time = 3;\nvar time_remaining;\nif (typeof alarm_flag ==\"undefined\")\n{\n    alarm_flag = false; \n    msg.alarm = false;\n}\n\nif(payload >= time && !alarm_flag)\n{\n    alarm_flag=true;\n    msg.alarm = true;\n    context.set(\"alarm_flag\",alarm_flag);\n    return msg;\n}\nif(payload<time && alarm_flag)\n{\n    alarm_flag = false;\n    msg.alarm = false;\n    context.set(\"alarm_flag\", alarm_flag);\n    return msg;\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 700,
        "wires": [
            [
                "35143b80ac71d408"
            ]
        ]
    },
    {
        "id": "35143b80ac71d408",
        "type": "switch",
        "z": "814a5ca7292ea26e",
        "name": "",
        "property": "alarm",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 640,
        "wires": [
            [
                "932545bab067e37e",
                "a16c2bed79f10108",
                "7158b91d5786a095"
            ],
            [
                "2638bd65ee313cd0"
            ]
        ]
    },
    {
        "id": "54cd99aba90f385a",
        "type": "e-mail",
        "z": "814a5ca7292ea26e",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "brian_gan@aceresource.biz",
        "dname": "Motor service email",
        "x": 1090,
        "y": 520,
        "wires": []
    },
    {
        "id": "c4c975e3e864bbd1",
        "type": "ui_chart",
        "z": "814a5ca7292ea26e",
        "name": "",
        "group": "2f8767567c897ac3",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "Hydrogen Gas Concentration (H2)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "95bc699ab6279920",
        "type": "ui_gauge",
        "z": "814a5ca7292ea26e",
        "name": "",
        "group": "2f8767567c897ac3",
        "order": 2,
        "width": 6,
        "height": 6,
        "gtype": "donut",
        "title": "Not Sure",
        "label": "mins",
        "format": "{{value}}",
        "min": 0,
        "max": "3",
        "colors": [
            "#b34700",
            "#e6e600",
            "#3acb4a"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 840,
        "wires": []
    },
    {
        "id": "01f17db524adee51",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "rssi return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, day , rssi;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'RSSI') {\n        rssi = value;\n    } \n}\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\n\n// Set the result object as the node's payload\nmsg.payload = rssi;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "8a92a0f8a43b7e54"
            ]
        ]
    },
    {
        "id": "d51d1e9f5723cbbb",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 1,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5> Timestamp",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "2d4cd070add6d221",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 2,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5> H2",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "da0b46e704ba1882",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 3,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5> Power (W)",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 320,
        "wires": []
    },
    {
        "id": "8a92a0f8a43b7e54",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 4,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5> RSSI",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "ccc95cb92c0dd8ef",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 5,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5> Robot Runtime (mins)",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 460,
        "wires": []
    },
    {
        "id": "c4f8b6c21889f492",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "remain return",
        "func": "// Input string\nvar inputString = msg.payload;\n\n// Split the string by comma\nvar parts = inputString.split(';');\n\n// Initialize variables to store the integer values\nvar amps, watts, temp, time, day, remaining;\n\n// Loop through the parts array\nfor (var i = 0; i < parts.length; i++) {\n    // Split each part by colon\n    var keyValue = parts[i].split(',');\n\n    // Trim whitespace from the key and value\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n\n    // Check the key and assign the value to the corresponding variable\n    if (key === 'Temperature') {\n        temp = value;\n    } else if (key === 'AMPS') {\n        amps = value;\n    } else if (key === 'WATTS') {\n        watts = value;\n    } else if (key === 'Time') {\n        time = value;\n    } else if (key === 'Remain') {\n        remaining = parseFloat((value / 60000).toFixed(2));\n    }\n}\n\n\n// Create an object to hold the values\n// var result = { cm: cm, inch: inch };\nif (remaining <= 0)\n{\n    remaining = 0;\n}\n\n// Set the result object as the node's payload\nmsg.payload = remaining;\n\n// Return the message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "95bc699ab6279920",
                "467ff62a06b7c9a8",
                "71ef6b80cf0bb50b"
            ]
        ]
    },
    {
        "id": "467ff62a06b7c9a8",
        "type": "debug",
        "z": "814a5ca7292ea26e",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 880,
        "wires": []
    },
    {
        "id": "71ef6b80cf0bb50b",
        "type": "ui_text",
        "z": "814a5ca7292ea26e",
        "group": "f0204d4b94e4e17a",
        "order": 6,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "<font size = 5>  Not sure",
        "format": "<font size = 5> {{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "83e9a74f8b84cd0a",
        "type": "ui_template",
        "z": "814a5ca7292ea26e",
        "group": "2f8767567c897ac3",
        "name": "Alarm",
        "order": 5,
        "width": 5,
        "height": 5,
        "format": "<head>\n    <style>\n        #container {\n            position: relative;\n            width: 180px;\n            height: 220px; /* Increased height to accommodate the text above the circle */\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        #Alarm {\n            width: 180px;\n            height: 180px;\n            background-color: {{msg.payload}};\n            border-radius: 50%;\n        }\n        #AlarmText {\n            font-family: Arial, sans-serif;\n            font-size: 20px;\n            color: black; /* Change this color as needed for visibility */\n            margin-bottom: 10px; /* Space between the text and the circle */\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\">\n        <p id=\"AlarmText\">Alarm</p>\n        <div id=\"Alarm\"></div>\n    </div>\n</body>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "a16c2bed79f10108",
        "type": "change",
        "z": "814a5ca7292ea26e",
        "name": "red",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 640,
        "wires": [
            [
                "83e9a74f8b84cd0a"
            ]
        ]
    },
    {
        "id": "2638bd65ee313cd0",
        "type": "change",
        "z": "814a5ca7292ea26e",
        "name": "green",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 760,
        "wires": [
            [
                "83e9a74f8b84cd0a"
            ]
        ]
    },
    {
        "id": "05bd32d2957f102c",
        "type": "ui_switch",
        "z": "814a5ca7292ea26e",
        "name": "",
        "label": "Alarm Switch",
        "tooltip": "",
        "group": "2f8767567c897ac3",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "scale: 1.5",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "60be17ea6675eb7e"
            ]
        ],
        "icon": "node-red-contrib-alarm/alarm.png"
    },
    {
        "id": "60be17ea6675eb7e",
        "type": "change",
        "z": "814a5ca7292ea26e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 580,
        "wires": [
            [
                "4e3596285db2177b"
            ]
        ]
    },
    {
        "id": "08cbac3b676e5684",
        "type": "ui_toast",
        "z": "814a5ca7292ea26e",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1070,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "7158b91d5786a095",
        "type": "trigger",
        "z": "814a5ca7292ea26e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 980,
        "y": 680,
        "wires": [
            [
                "a535ee572393dc17"
            ]
        ]
    },
    {
        "id": "a535ee572393dc17",
        "type": "change",
        "z": "814a5ca7292ea26e",
        "name": "grey",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "grey",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "83e9a74f8b84cd0a"
            ]
        ]
    },
    {
        "id": "b7698c9856d6de30",
        "type": "ui_audio",
        "z": "814a5ca7292ea26e",
        "name": "",
        "group": "f27b4fdd4a66e00d",
        "voice": "Microsoft Zira - English (United States)",
        "always": false,
        "x": 1280,
        "y": 440,
        "wires": []
    },
    {
        "id": "647ef8159208b925",
        "type": "function",
        "z": "814a5ca7292ea26e",
        "name": "Audio message",
        "func": "msg.payload = \"hi.. Motor Runtime Alert\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 440,
        "wires": [
            [
                "b7698c9856d6de30"
            ]
        ]
    },
    {
        "id": "343b3ae2e9a64de2",
        "type": "ui_spacer",
        "z": "814a5ca7292ea26e",
        "name": "spacer",
        "group": "2f8767567c897ac3",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "5e389acb05121f55",
        "type": "ui_spacer",
        "z": "814a5ca7292ea26e",
        "name": "spacer",
        "group": "2f8767567c897ac3",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "b4c5c172ca4f9924",
        "type": "ui_spacer",
        "z": "814a5ca7292ea26e",
        "name": "spacer",
        "group": "2f8767567c897ac3",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "35d464fd7288e4f9",
        "type": "ui_spacer",
        "z": "814a5ca7292ea26e",
        "name": "spacer",
        "group": "2f8767567c897ac3",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "4f365db85cd06eda",
        "type": "ui_spacer",
        "z": "814a5ca7292ea26e",
        "name": "spacer",
        "group": "2f8767567c897ac3",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "b62b2fb7fd38bca7",
        "type": "serial-port",
        "name": "",
        "serialport": "COM5",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "2f8767567c897ac3",
        "type": "ui_group",
        "name": "Sensor Display",
        "tab": "a922642a11d2b744",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f0204d4b94e4e17a",
        "type": "ui_group",
        "name": "Robot Condition",
        "tab": "a922642a11d2b744",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f27b4fdd4a66e00d",
        "type": "ui_group",
        "name": "Image",
        "tab": "d18bfae6dcf59026",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a922642a11d2b744",
        "type": "ui_tab",
        "name": "Hydroguard",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d18bfae6dcf59026",
        "type": "ui_tab",
        "name": "Image Transmission",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]